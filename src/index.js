const { ApolloServer } = require('apollo-server');
const { ApolloServerPluginUsageReporting } = require("apollo-server-core");
const typeDefs = require('./schema');
const resolvers = require('./resolvers');
const TrackAPI = require('./datasources/track-api');

async function startApolloServer(typeDefs, resolvers) {

  const graphRef = "Catstronauts-Lift-off-hiasip@current";
  const key = "service:Catstronauts-Lift-off-hiasip:DBQSrvZTRAJ-qZDewewRJQ";

  const server = new ApolloServer({
    typeDefs,
    resolvers,
    dataSources: () => {
      return {
        trackAPI: new TrackAPI(),
      };
    },
    /*
    // Apollo Client ta belirlediÄŸin ayarlara gÃ¶re
    // buradan yani apollo server dan Ã§ekiyorsun bu bilgileri
    // buradan da apollo studio da tracing report olarak gÃ¶receksin
    // hangi query nereden yapÄ±lmÄ±ÅŸ vb web, mobile vb..tabi birden fazla server olabilir her biri iÃ§in
    // Ã§Ã¼nkÃ¼ burada "web" diye apollo client da biz belirledik
    // veya 2 server deÄŸil, header dan web,mobile vb nereden geliyorsa onun bilgisini
    // header dan Ã§ekip apollo client a aktarabiliriz
    // sonra apollo studio 2 farklÄ± gÃ¶sterim yapÄ±yor mu kendisi ayarlÄ±yor mu bilmiyorum tabi..
    // sanÄ±rÄ±m apollo support gerekiyor "client awareness" istiyorum diye istek yolluyorsun ?
    // bu sayede hangi query hangi client da error vermiÅŸ vb diagnosis yapabiliyorsun
    // yani client lar farklÄ± field larÄ± kullanabilir bunlarÄ± gÃ¶steren vb bilgiler "client awareness" oluyor
    // schema dan yaptÄ±ÄŸÄ±n herhangi bir deÄŸiÅŸiklik, resolver veya data source (rest api vb) de de
    // deÄŸiÅŸikliÄŸe neden olur genelde.
    // APOLLO_KEY/APOLLO_GRAPH_REF deÄŸerlerini istiyor bunun iÃ§in
    // sandbox yani localhost da Ã§alÄ±ÅŸmÄ±yor sanÄ±rÄ±m...
    apollo: {key, graphRef},
    plugins: [
      ApolloServerPluginUsageReporting({
        generateClientInfo: ({ request }) => {
          // userSuppliedLogic i kendin yazman lazÄ±m..
          const { clientName, clientVersion } = userSuppliedLogic(request);
          return {
            clientName,
            clientVersion
          };
        }
      })
    ],
    */

  });

  // const { url, port } = await server.listen();

  const { url, port } = await server.listen({port: process.env.PORT || 4000});

  console.log(`
      ðŸš€  Server is running
      ðŸ”‰  Listening on port ${port}
      ðŸ“­  Query at ${url}
    `);
}

startApolloServer(typeDefs, resolvers);
